public class WithdrawException extends Exception {
    public WithdrawException(){
        super();
    }
    public WithdrawException(String s){
        super(s);
    }
}


public class Account {

    protected double balance;
    protected String name;

    public Account(double balance, String name) {
        this.balance = balance;
        this.name = name;
    }

    public void deposit(double a) {
        if (a > 0) {
            this.balance = this.balance + a;
            System.out.println(a + " baht is deposited to " + this.name + ".");
        } else {
            System.out.println("Input number must be a positive integer.");
        }
    }

    public void withdraw(double amount) throws WithdrawException {
        if (amount > 0 && this.balance - amount > 0) {
            this.balance = this.balance - amount;
            System.out.println(amount + " baht is withdrawn from " + this.name + ".");
        } else if (amount < 0) {
            System.out.println("Input number must be a positive integer.");
        } else if (balance - amount < 0) {
            throw new WithdrawException("Account " + this.name + " has not enough money.");
        }
    }
    
    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    public double getBalance() {
        return balance;
    }

    public void showAccount() {
        System.out.println(this.name + " account has " + this.balance + " baht.");
    }
}


public class CheckingAccount extends Account {

    private double credit;

    public CheckingAccount() {
        this(0, "", 0);
    }

    public CheckingAccount(double balance, String name, double credit) {
        super(balance, name);
        this.credit = credit;
    }

    public void setCredit(double credit) {
        if (credit > 0) {
            this.credit = credit;
        } else {
            System.out.println("Input number must be a positive integer.");
        }
    }

    public double getCredit() {
        return credit;
    }

    public void withdraw(double amount) throws WithdrawException {
        if (amount > 0) {
            if (this.balance - amount >= 0) {
                this.balance = this.balance - amount;
                System.out.println(amount + " baht is withdrawn from " + this.name + " and your credit balance is " + this.credit + ".");
            } else if (this.balance - amount < 0 && this.balance - amount + this.credit >= 0) {
                this.credit = this.balance - amount + this.credit;
                this.balance = 0;
                System.out.println(amount + " baht is withdrawn from " + this.name + " and your credit balance is " + this.credit + ".");
            } else if (this.balance - amount < 0 && this.balance - amount + this.credit < 0) {
//                System.out.println("Not enough money!");
                throw new WithdrawException("Account " + this.name + " has not enough money.");
            }
        } else {
            super.withdraw(amount);
        }
    }

    public void withdraw(String a) throws WithdrawException {
        this.withdraw(Double.parseDouble(a));
    }

    public String toString() {
        return "The " + this.name + " account has " + this.balance + " baht and " + this.credit + " credits.";
    }
}



public class Customer extends CheckingAccount {

    private String firstName;
    private String lastName;
    private CheckingAccount acct;

    public Customer() {
        this("", "", null);
    }

    public Customer(String firstName, String lastName) {
        this(firstName, lastName, null);
    }

    public Customer(String firstName, String lastName, CheckingAccount acct) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.acct = acct;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setAcct(CheckingAccount acct) {
        this.acct = acct;
    }

    public CheckingAccount getAcct() {
        return acct;
    }

    public String toString() {
        if (acct == null) {
            return firstName + " " + lastName + " doesnâ€™t have account.";
        } else {
            return "The " + firstName + " account has " + acct.getBalance() + " baht and " + acct.getCredit() + " credits.";
        }
    }

    public boolean equals(Customer c) {
        return firstName.equals(c.firstName) && lastName.equals(c.lastName);
    }
}



public class Main {

    public static void main(String[] args) {
        CheckingAccount acct1 = new CheckingAccount(1000, "A0001", 500);
        Customer cust = new Customer("Sompong", "Sookjai", acct1);
//        cust.getAcct().deposit(500);
//        cust.getAcct().withdraw(1800);
//        cust.getAcct().withdraw(300);
//        cust.getAcct().deposit(1000);
//        cust.getAcct().withdraw(200);

        try {
            cust.getAcct().deposit(500);
            cust.getAcct().withdraw(1800);
            cust.getAcct().withdraw(300);
            cust.getAcct().deposit(1000);
            cust.getAcct().withdraw(200);
        } catch (WithdrawException ex) { //ex what is that?
            System.out.println(ex);
        } finally {
            System.out.println("Thank you.");
        }
    }

}
